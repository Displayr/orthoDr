distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = silverman(1, sum(trainCensor)))
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
sqrt(sum(trainCensor))
sum(trainCensor)
silverman(1, sum(trainCensor))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.5)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.4)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.6)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.7)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
global.linearity.surv.fit
global.linearity.surv.fit
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor)
c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
sqrt(sum(trainCensor))
sum(trainCensor)*silverman(1, length(trainY))
sum(trainCensor)*silverman(1, length(trainY))/2
silverman(1, length(trainY))
sqrt(sum(trainCensor))/sum(trainCensor)
silverman(1, sum(trainCensor))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = silverman(1, sum(trainCensor)))
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.1)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.2)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.24)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor, mean.bandwidth = sqrt(sum(trainCensor)))
c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
sqrt(sum(trainCensor))
sqrt(sum(trainCensor))
sqrt(sum(trainCensor))*2
sum(trainCensor)
sqrt(sum(trainCensor))*2/sum(trainCensor)
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.1114556)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.12)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.3)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = 0.1)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr_surv
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list(eta = 0.3), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("eta" = 0.5), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("rho" = 0.01), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("rho" = 0.0001), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr_surv
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("gamma" = 0.4), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("gamma" = 0.1), verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit
setting = 4
setting = 4
N = 400
P = 12
for (s in 1:nsim)
{
#################### generate data
set.seed(eff_seeds[s])
# set.seed(506) setting 2
if (setting == 1)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(c(1, 0.5, 0, 0, 0, rep(0, P-5)))
censorEDR = as.matrix(c(0, 0, 0, 1, 1, rep(0, P-5)))
T = rexp(N, exp(dataX %*% failEDR))
C = rexp(N, exp(dataX %*% censorEDR - 1))
ndr = 1
}
if (setting == 2)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T1 = rexp(N, exp(dataX %*% failEDR[,1]))
T2 = rexp(N, exp(dataX %*% failEDR[,2]))
comein = 0.4
T = T1*(T1<comein) + (T2+comein)*(T1>=comein)
C = rexp(N, exp(dataX %*% censorEDR - 2))
ndr = 2
}
if (setting == 3)
{
dataX = matrix(runif(N*P), N, P)
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T = rweibull(N, shape = 5, scale = exp(4*(dataX %*% failEDR[,2])*(dataX %*% failEDR[,1] - 1)))
C = runif(N, min = 0, max = 3*exp(dataX %*% censorEDR+0.5))
ndr = 2
}
if (setting == 4) # Lu and Li 2011
{
V=matrix(0.25, P, P)
diag(V) = 1
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 1, 0, 0, 0, 0, rep(0, P-6)),
c(0, 0, 1, -1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 1, 0, 1, 1, 1, rep(0, P-6)))
T = exp( -2.5 + dataX %*% failEDR[,1] + 0.5 * (dataX %*% failEDR[,1]) * (dataX %*% failEDR[,2]) + 0.25 * log(-log(1-runif(N)))  )
C = exp( -0.5 + dataX %*% censorEDR  + log(-log(1-runif(N))) )
# -1.57 for 40% censoring
# -0.15 for 20% censoring
ndr = 2
}
Y = pmin(T, C)
Censor = (T < C)
trainX = dataX
trainY = Y
trainCensor = Censor
colnames(trainX) = paste("X", c(1:ncol(trainX)), sep = "")
################# fitting models ################
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor, mean.bandwidth = sqrt(sum(trainCensor)))
summary.matrix[s, 1:3] = c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor)
summary.matrix[s, 4:6] = c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = silverman(1, sum(trainCensor)))
summary.matrix[s, 7:9] = c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("gamma" = 0.1), verbose = 2)
# compare with the true direction
summary.matrix[s, 10:12] = c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
print(s)
print(summary.matrix[s,])
}
library(MASS)
source("..\\SemiDrSurv_Parallel.r")
nsim = 100
summary.matrix = matrix(NA, nsim, 13)
colnames(summary.matrix) = c(rep(c("Dist", "trace", "canonical"), 4), "seed")
eff_seeds <- sample(1:2^15, nsim)
summary.matrix[, 13] = eff_seeds
setting = 3
N = 400
P = 12
for (s in 1:nsim)
{
#################### generate data
set.seed(eff_seeds[s])
# set.seed(506) setting 2
if (setting == 1)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(c(1, 0.5, 0, 0, 0, rep(0, P-5)))
censorEDR = as.matrix(c(0, 0, 0, 1, 1, rep(0, P-5)))
T = rexp(N, exp(dataX %*% failEDR))
C = rexp(N, exp(dataX %*% censorEDR - 1))
ndr = 1
}
if (setting == 2)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T1 = rexp(N, exp(dataX %*% failEDR[,1]))
T2 = rexp(N, exp(dataX %*% failEDR[,2]))
comein = 0.4
T = T1*(T1<comein) + (T2+comein)*(T1>=comein)
C = rexp(N, exp(dataX %*% censorEDR - 2))
ndr = 2
}
if (setting == 3)
{
dataX = matrix(runif(N*P), N, P)
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T = rweibull(N, shape = 5, scale = exp(4*(dataX %*% failEDR[,2])*(dataX %*% failEDR[,1] - 1)))
C = runif(N, min = 0, max = 3*exp(dataX %*% censorEDR+0.5))
ndr = 2
}
if (setting == 4) # Lu and Li 2011
{
V=matrix(0.25, P, P)
diag(V) = 1
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 1, 0, 0, 0, 0, rep(0, P-6)),
c(0, 0, 1, -1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 1, 0, 1, 1, 1, rep(0, P-6)))
T = exp( -2.5 + dataX %*% failEDR[,1] + 0.5 * (dataX %*% failEDR[,1]) * (dataX %*% failEDR[,2]) + 0.25 * log(-log(1-runif(N)))  )
C = exp( -0.5 + dataX %*% censorEDR  + log(-log(1-runif(N))) )
# -1.57 for 40% censoring
# -0.15 for 20% censoring
ndr = 2
}
Y = pmin(T, C)
Censor = (T < C)
trainX = dataX
trainY = Y
trainCensor = Censor
colnames(trainX) = paste("X", c(1:ncol(trainX)), sep = "")
################# fitting models ################
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor, mean.bandwidth = sqrt(sum(trainCensor)))
summary.matrix[s, 1:3] = c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor)
summary.matrix[s, 4:6] = c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor, bw = silverman(1, sum(trainCensor)))
summary.matrix[s, 7:9] = c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, control = list("gamma" = 0.1), verbose = 2)
# compare with the true direction
summary.matrix[s, 10:12] = c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
print(s)
print(summary.matrix[s,])
}
library(orthoDr)
library(MASS)
source("..\\SemiDrSurv_Parallel.r")
source("..\\LocalSurv.r")
nsim = 100
summary.matrix = matrix(NA, nsim, 13)
colnames(summary.matrix) = c(rep(c("Dist", "trace", "canonical"), 4), "seed")
eff_seeds <- sample(1:2^15, nsim)
summary.matrix[, 13] = eff_seeds
setting = 3
N = 400
P = 6
set.seed(506)
if (setting == 1)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(c(1, 0.5, 0, 0, 0, rep(0, P-5)))
censorEDR = as.matrix(c(0, 0, 0, 1, 1, rep(0, P-5)))
T = rexp(N, exp(dataX %*% failEDR))
C = rexp(N, exp(dataX %*% censorEDR - 1))
ndr = 1
}
if (setting == 2)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T1 = rexp(N, exp(dataX %*% failEDR[,1]))
T2 = rexp(N, exp(dataX %*% failEDR[,2]))
comein = 0.4
T = T1*(T1<comein) + (T2+comein)*(T1>=comein)
C = rexp(N, exp(dataX %*% censorEDR - 2))
ndr = 2
}
if (setting == 3)
{
dataX = matrix(runif(N*P), N, P)
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T = rweibull(N, shape = 5, scale = exp(4*(dataX %*% failEDR[,2])*(dataX %*% failEDR[,1] - 1)))
C = runif(N, min = 0, max = 3*exp(dataX %*% censorEDR+0.5))
ndr = 2
}
if (setting == 4) # Lu and Li 2011
{
V=matrix(0.25, P, P)
diag(V) = 1
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 1, 0, 0, 0, 0, rep(0, P-6)),
c(0, 0, 1, -1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 1, 0, 1, 1, 1, rep(0, P-6)))
T = exp( -2.5 + dataX %*% failEDR[,1] + 0.5 * (dataX %*% failEDR[,1]) * (dataX %*% failEDR[,2]) + 0.25 * log(-log(1-runif(N)))  )
C = exp( -0.5 + dataX %*% censorEDR  + log(-log(1-runif(N))) )
# -1.57 for 40% censoring
# -0.15 for 20% censoring
ndr = 2
}
Y = pmin(T, C)
Censor = (T < C)
trainX = dataX
trainY = Y
trainCensor = Censor
colnames(trainX) = paste("X", c(1:ncol(trainX)), sep = "")
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor, mean.bandwidth = sqrt(sum(trainCensor)))
c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
local.fit = local.surv.fit(trainX, trainY, trainCensor, nslices = sqrt(sum(trainCensor)), nslicesY = sqrt(nrow(trainX)), alpha = 0)
library(dr)
local.fit = local.surv.fit(trainX, trainY, trainCensor, nslices = sqrt(sum(trainCensor)), nslicesY = sqrt(nrow(trainX)), alpha = 0)
c(distance(failEDR, local.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, local.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, local.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, B.initial = failEDR, verbose = 2)
sqrt(0.0891259)
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, B.initial = failEDR, bw = 0.1, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, B.initial = failEDR,  verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
trainX
scale(trainX, scale = FASLE)
scale(trainX, scale = FALSE)
Xs = scale(trainX, scale = FALSE)
var(Xs)
var(as.vector(Xs)
)
sqrt(var(as.vector(Xs)))
1/sqrt(var(as.vector(Xs)))
Xs = Xs/sqrt(var(as.vector(Xs)))
sqrt(var(as.vector(Xs)))
library(orthoDr)
nsim = 100
summary.matrix = matrix(NA, nsim, 13)
colnames(summary.matrix) = c(rep(c("Dist", "trace", "canonical"), 4), "seed")
eff_seeds <- sample(1:2^15, nsim)
summary.matrix[, 13] = eff_seeds
setting = 3
N = 400
P = 6
set.seed(506)
if (setting == 1)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(c(1, 0.5, 0, 0, 0, rep(0, P-5)))
censorEDR = as.matrix(c(0, 0, 0, 1, 1, rep(0, P-5)))
T = rexp(N, exp(dataX %*% failEDR))
C = rexp(N, exp(dataX %*% censorEDR - 1))
ndr = 1
}
if (setting == 2)
{
rho = 0.5
Di <- 1:P
H <- abs(outer(Di, Di, "-"))
V=rho^H
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T1 = rexp(N, exp(dataX %*% failEDR[,1]))
T2 = rexp(N, exp(dataX %*% failEDR[,2]))
comein = 0.4
T = T1*(T1<comein) + (T2+comein)*(T1>=comein)
C = rexp(N, exp(dataX %*% censorEDR - 2))
ndr = 2
}
if (setting == 3)
{
dataX = matrix(runif(N*P), N, P)
failEDR = as.matrix(cbind(c(1, 0, 1, 0, 0, 0, rep(0, P-6)),
c(0, 1, 0, 1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 0, 0, 0, 1, -1, rep(0, P-6)))
T = rweibull(N, shape = 5, scale = exp(4*(dataX %*% failEDR[,2])*(dataX %*% failEDR[,1] - 1)))
C = runif(N, min = 0, max = 3*exp(dataX %*% censorEDR+0.5))
ndr = 2
}
if (setting == 4) # Lu and Li 2011
{
V=matrix(0.25, P, P)
diag(V) = 1
dataX = as.matrix(mvrnorm(N, mu=rep(0,P), Sigma=V))
failEDR = as.matrix(cbind(c(1, 1, 0, 0, 0, 0, rep(0, P-6)),
c(0, 0, 1, -1, 0, 0, rep(0, P-6))))
censorEDR = as.matrix(c(0, 1, 0, 1, 1, 1, rep(0, P-6)))
T = exp( -2.5 + dataX %*% failEDR[,1] + 0.5 * (dataX %*% failEDR[,1]) * (dataX %*% failEDR[,2]) + 0.25 * log(-log(1-runif(N)))  )
C = exp( -0.5 + dataX %*% censorEDR  + log(-log(1-runif(N))) )
# -1.57 for 40% censoring
# -0.15 for 20% censoring
ndr = 2
}
Y = pmin(T, C)
Censor = (T < C)
trainX = dataX
trainY = Y
trainCensor = Censor
colnames(trainX) = paste("X", c(1:ncol(trainX)), sep = "")
global.linearity.fit = global.linearity.surv.fit(trainX, trainY, trainCensor, mean.bandwidth = sqrt(sum(trainCensor)))
c(distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, global.linearity.fit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
CPSIRfit = CP_SIR(trainX, trainY, trainCensor)
c(distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "dist"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "trace"),
distance(failEDR, CPSIRfit$vectors[,1:ndr, drop = FALSE], "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
z
library(orthoDr)
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, bw = 0.25, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, bw = 0.3, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
silverman(1, 400)
silverman(2, 400)
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
orthoDr.fit = orthoDr_surv(trainX, trainY, trainCensor, ndr = ndr, bw = 0.3, verbose = 2)
c(distance(failEDR, orthoDr.fit$B, "dist"),
distance(failEDR, orthoDr.fit$B, "trace"),
distance(failEDR, orthoDr.fit$B, "canonical", trainX))
n^(-1/(2+4))
400^(-1/(2+4))
(4/(2+2))^(1/(2+4))
400^(-1/(2+3))
library(orthoDr)
